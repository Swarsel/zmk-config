/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
    quick-tap-ms = <70>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        // COLEMAK DH Layer

        colemak_dh {
            bindings = <
&none  &kp Q       &kp W       &kp F        &kp P        &kp B                                                             &kp J         &kp L        &kp U        &kp Y       &kp SEMI    &none
&none  &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &mt RALT G                                                        &mt RALT M    &mt RSHFT N  &mt LCTRL E  &mt LALT I  &mt RGUI O  &none
&none  &kp Z       &kp X       &kp C        &kp D        &kp V        &none      &mo 7         &mo 6      &none            &kp K         &kp H        &kp COMMA    &kp DOT     &kp SLASH   &none
                               &none        &none        &lt 3 ENTER  &kp SPACE  &lt 2 ESCAPE  &lt 5 TAB  &lt 4 BACKSPACE  &lt 8 DELETE  &mo 9        &none
            >;
        };

        // COLEMAK DH SAFE Layer
        // QWERTY Layer

        qwerty {
            bindings = <
&kp TAB        &kp Q  &kp W  &kp E  &kp R  &kp T                                                                  &kp Y         &kp U  &kp I      &kp O    &kp P      &kp BSPC
&mt LCTRL ESC  &kp A  &kp S  &kp D  &kp F  &kp G                                                                  &kp H         &kp J  &kp K      &kp L    &kp SEMI   &mt RCTRL ESCAPE
&kp LSHFT      &kp Z  &kp X  &kp C  &kp V  &kp B      &kp LEFT_BRACKET  &mo 7       &mo 6      &kp RIGHT_BRACKET  &kp N         &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                             &none  &none  &kp ENTER  &kp SPACE         &kp ESCAPE  &lt 5 TAB  &lt 4 BACKSPACE    &lt 8 DELETE  &mo 9  &none
            >;
        };

        // NAV Layer

        nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                                  &kp K_AGAIN  &kp K_PASTE  &kp K_COPY     &kp K_CUT  &kp K_UNDO  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                  &trans       &kp LEFT     &kp DOWN       &kp UP     &kp RIGHT   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans  &kp INSERT   &kp HOME     &kp PAGE_DOWN  &kp PG_UP  &kp END     &trans
                            &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans       &trans       &trans
            >;
        };

        // MOVE Layer

        move {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                                  &trans  &trans            &trans            &trans            &trans             &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                  &trans  &kp LG(LEFT)      &kp LG(DOWN)      &kp LG(UP_ARROW)  &kp LG(RIGHT)      &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &kp LG(LS(LEFT))  &kp LG(LS(DOWN))  &kp LS(LG(UP))    &kp LG(LS(RIGHT))  &trans
                            &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans
            >;
        };

        // SYM Layer

        sym {
            bindings = <
&trans  &kp DQT    &kp AMPS  &kp ASTRK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                                              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON  &kp DLLR  &kp PERCENT  &kp CARET             &kp PLUS                                                           &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT       &kp HASH              &kp PIPE               &trans           &trans     &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
                             &trans       &trans                &kp LEFT_BRACE         &kp RIGHT_BRACE  &kp UNDER  &trans  &trans  &trans  &trans     &trans
            >;
        };

        // NUM Layer

        num {
            bindings = <
&trans  &kp SINGLE_QUOTE  &kp N7  &kp N8  &kp N9  &kp N0                                                          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI          &kp N4  &kp N5  &kp N6  &kp EQUAL                                                       &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
&trans  &kp GRAVE         &kp N1  &kp N2  &kp N3  &kp BACKSLASH     &trans             &trans     &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
                                  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS  &trans  &trans  &trans  &trans     &trans
            >;
        };

        // FUNCTION Layer

        function {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                                  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                                  &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
&trans  &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
                         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans
            >;
        };

        // ADJUST Layer

        adjust {
            bindings = <
&trans          &trans        &trans        &to 1         &trans        &trans                                        &trans  &kp C_PREV  &kp C_PLAY  &kp C_STOP  &kp C_NEXT  &kp C_VOLUME_UP
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &trans  &trans      &trans      &trans      &trans      &kp C_MUTE
&trans          &trans        &trans        &to 0         &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans      &trans      &kp C_VOLUME_DOWN
                                            &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans      &trans
            >;
        };

        // CHANGE Layer

        change {
            bindings = <
&trans  &trans  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &trans                                      &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &trans                                      &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
&trans  &trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans      &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
                            &trans      &trans      &kp LG(N0)  &trans  &trans  &trans  &trans  &trans  &trans     &trans
            >;
        };

        // SEND Layer

        send {
            bindings = <
&trans  &trans  &kp LG(LS(N7))  &kp LG(LS(N8))  &kp LG(LS(N9))  &trans                                          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &kp LG(LS(N4))  &kp LG(LS(N5))  &kp LG(LS(N6))  &trans                                          &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RGUI  &trans
&trans  &trans  &kp LG(LS(N1))  &kp LG(LS(N2))  &kp LG(LS(N3))  &trans          &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
                                &trans          &trans          &kp LG(LS(N0))  &trans  &trans  &trans  &trans  &trans  &trans     &trans
            >;
        };
    };
};
